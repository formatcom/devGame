// Generated by CoffeeScript 1.10.0
(function() {
  var CONST, Generic, Rect, collision;

  CONST = require('../../const');

  Generic = require('../Generic');

  collision = require('../../collision');


  /*
  @class
  @memberof DEVGAME.entity
  @param x {number} The X coordinate of the upper-left corner of the rectangle
  @param y {number} The Y coordinate of the upper-left corner of the rectangle
  @param width {number} The overall width of the rectangle
  @param height {number} The overall height of this rectangle
   */

  Rect = function(x, y, width, height, fill) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (width == null) {
      width = 0;
    }
    if (height == null) {
      height = 0;
    }
    if (fill == null) {
      fill = false;
    }
    Generic.call(this, x, y);

    /*
    @member {number}
    @default 0
     */
    this.width = width;

    /*
    @member {number}
    @default 0
     */
    this.height = height;
    this.fill = fill;
    this.sprite = null;

    /*
    The  type of the object
    
    @member {number}
     */
    this.type = CONST.SHAPES.RECT;
    return this;
  };

  Rect.prototype = Object.create(Generic.prototype);

  Rect.prototype.setSprite = function(sprite) {
    return this.sprite = sprite;
  };


  /*
  Creates a clone od this Rectangle
  
  @return {DEVGAME.entity.Rect}
   */

  Rect.prototype.clone = function() {
    return new Rect(this.x, this.y, this.width, this.height);
  };

  Rect.prototype.draw = function() {
    var context;
    context = this.context || this.parent.context;
    if (this.sprite) {
      return context.drawImage(this.sprite.get(), this.sprite.sx, this.sprite.sy, this.sprite.swidth, this.sprite.sheight, this.x, this.y, this.width, this.height);
    } else if (this.fill === true) {
      context.fillStyle = this.color;
      return context.fillRect(this.x, this.y, this.width, this.height);
    } else {
      context.strokeStyle = this.color;
      context.rect(this.x, this.y, this.width, this.height);
      return context.stroke();
    }
  };

  Rect.prototype.collision = function(rect) {
    return collision.rectToRect(this, rect);
  };

  Rect.prototype.collisionCircle = function(circle) {
    return collision.rectToCircle(this, circle);
  };

  Generic.prototype.exec = function() {
    this.logic();
    if (this.sprite) {
      return this.sprite.exec();
    }
  };

  module.exports = Rect;

}).call(this);
